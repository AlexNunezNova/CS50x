import csv
import sys


def main():

    # TODO: Check for command-line usage
    if len(sys.argv) != 3:
        print("Invalid input. Please use a valid CSV file and a valid text file")

    # TODO: Read database file into a variable
    # set a variable and remember headers separately
    peopleDB = []
    strHeaders = []

    # open database and create list of dictionaries
    with open(sys.argv[1], "r") as file:
        reader = csv.DictReader(file)
        for line in reader:
            peopleDB.append(line)

    # create list with headers (only STR)
    with open(sys.argv[1], "r") as file:
        reader = csv.reader(file)
        counter = 0
        for line in reader:
            if counter == 0:
                strHeaders = line[1:len(line)]
                counter += 1

    # TODO: Read DNA sequence file into a variable
    # set a variable
    sequence = []

    # open sequence and copy to list, eliminating line change
    with open(sys.argv[2], "r") as file:
        sequence = file.readline().rstrip("\n")

    # TODO: Find longest match of each STR in DNA sequence
    #create a loop for every STR
    strMatch = []
    linecounter = 0
    for line in strHeaders:
        strMatch.append(longest_match(sequence, line[linecounter]))
        linecounter += 1


    runAGATC = longest_match(sequence, "AGATC")
    runAATG = longest_match(sequence, "AATG")
    runTATC = longest_match(sequence, "TATC")

    # TODO: Check database for matching profiles
    # look each line in the database
    for line in peopleDB:
        # look for equivalences, converting data into ints
        if int(line['AGATC']) == runAGATC and int(line['AATG']) == runAATG and int(line['TATC']) == runTATC:
            print(f"{line['name']}")
            exit(0)

    # if there is not match after the loop, print message
    print("No match")


def longest_match(sequence, subsequence):
    """Returns length of longest run of subsequence in sequence."""

    # Initialize variables
    longest_run = 0
    subsequence_length = len(subsequence)
    sequence_length = len(sequence)

    # Check each character in sequence for most consecutive runs of subsequence
    for i in range(sequence_length):

        # Initialize count of consecutive runs
        count = 0

        # Check for a subsequence match in a "substring" (a subset of characters) within sequence
        # If a match, move substring to next potential match in sequence
        # Continue moving substring and checking for matches until out of consecutive matches
        while True:

            # Adjust substring start and end
            start = i + count * subsequence_length
            end = start + subsequence_length

            # If there is a match in the substring
            if sequence[start:end] == subsequence:
                count += 1

            # If there is no match in the substring
            else:
                break

        # Update most consecutive matches found
        longest_run = max(longest_run, count)

    # After checking for runs at each character in seqeuence, return longest run found
    return longest_run


main()
